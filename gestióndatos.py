# -*- coding: utf-8 -*-
"""Gesti√≥nDatos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15vTOPxaIqXX9z9c99mKens7YSKcnu78i

Sustituir Trace por 0.1mm en la precipitaci√≥n y crear la columna Date
"""

import pandas as pd
from google.colab import files

# üìå Subir archivo
uploaded = files.upload()

# Obtener el nombre del archivo subido
filename = list(uploaded.keys())[0]

# üìå Cargar datos en un DataFrame
df = pd.read_excel(filename)  # Cambia a read_excel(filename) si el archivo es Excel

# üìå Combinar Year, Month y Day en una columna Date
df['Date'] = pd.to_datetime(df[['Year', 'Month', 'Day']])

# üìå Reemplazar 'Trace' por 0.1 en la columna 'Precipitaci√≥n (mm)'
df['Precipitacion (mm)'] = df['Precipitacion (mm)'].replace('Trace', 0.1).astype(float)

# üìå Guardar el archivo modificado
df.to_excel('DatosTempHKObs__Finales.xlsx', index=False)

# üìå Descargar el archivo modificado
files.download('DatosTempHKObs__Finales.xlsx')

# üìå Mostrar las primeras filas para verificar
df.head()

"""Conocer tendencias"""

import pandas as pd
import numpy as np
from datetime import datetime

#  Cambia esta l√≠nea por la ruta de tu archivo
ruta_archivo = r"/content/DatosTempHKObs__Finales.xlsx"

# Leer el archivo Excel
df = pd.read_excel(ruta_archivo, parse_dates=['Date'])

# Verificar columnas necesarias
columnas_necesarias = ['Date', 'MaxTemp', 'MinTemp', 'MeanTemp']
if not all(col in df.columns for col in columnas_necesarias):
    raise ValueError(f"Faltan columnas necesarias en el archivo. Se requieren: {columnas_necesarias}")

# Ordenar por fecha
df = df.sort_values('Date')

# Convertir fechas a n√∫meros para regresi√≥n
df['DateOrd'] = df['Date'].map(datetime.toordinal)

# Funci√≥n para calcular y mostrar tendencias
def calcular_tendencia(y_column):
    z = np.polyfit(df['DateOrd'], df[y_column], 1)
    pendiente_dia = z[0]
    pendiente_anual = pendiente_dia * 365

    fecha_inicio = df['Date'].iloc[0]
    fecha_fin = df['Date'].iloc[-1]
    dias_totales = (fecha_fin - fecha_inicio).days
    cambio_total = pendiente_dia * dias_totales

    print(f"\n Tendencia para {y_column}:")
    print(f" - Tasa de cambio anual: {pendiente_anual:.4f} ¬∞C/a√±o")
    print(f" - Cambio total estimado ({fecha_inicio.date()} ‚Üí {fecha_fin.date()}): {cambio_total:.2f} ¬∞C")

# Ejecutar para cada temperatura
calcular_tendencia('MaxTemp')
calcular_tendencia('MinTemp')
calcular_tendencia('MeanTemp')

"""**Explicaci√≥n de medidas**"""

import pandas as pd
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt

# Cargar el archivo Excel
df = pd.read_excel('/content/DatosTempHKObs__Finales.xlsx')

# Lista de variables clim√°ticas que vas a analizar
variables = ['MaxTemp', 'MinTemp', 'MeanTemp', 'Humedad (%)', 'Presion (hPa)', 'Nubes (%)', 'Precipitacion (mm)']

# Diccionario para almacenar los resultados estad√≠sticos
resultados = {
    'Media': [],
    'Mediana': [],
    'Moda': [],
    'Varianza': [],
    'Desviaci√≥n Est√°ndar': [],
    'Rango': []
}

# C√°lculo de estad√≠sticas por variable
for var in variables:
    data = df[var].dropna()
    resultados['Media'].append(round(data.mean(), 2))
    resultados['Mediana'].append(round(data.median(), 2))

    moda_result = stats.mode(data, nan_policy='omit', keepdims=True)
    moda_valor = moda_result.mode
    if moda_valor.size > 0:
        resultados['Moda'].append(round(float(moda_valor[0]), 2))
    else:
        resultados['Moda'].append(np.nan)

    resultados['Varianza'].append(round(data.var(), 2))
    resultados['Desviaci√≥n Est√°ndar'].append(round(data.std(), 2))
    resultados['Rango'].append(round(data.max() - data.min(), 2))

# Crear tabla con los resultados
tabla_estadisticas = pd.DataFrame(resultados, index=variables)
print(tabla_estadisticas)

# -------------------------
# Histogramas separados
# -------------------------

fig, axs = plt.subplots(1, 3, figsize=(18, 5), sharey=True)

# Temperatura m√°xima
axs[0].hist(df['MaxTemp'].dropna(), bins=40, color='red', alpha=0.7)
axs[0].set_title('Frecuencia de MaxTemp')
axs[0].set_xlabel('Temperatura (¬∞C)')
axs[0].set_ylabel('Frecuencia')
axs[0].grid(True)

# Temperatura m√≠nima
axs[1].hist(df['MinTemp'].dropna(), bins=40, color='blue', alpha=0.7)
axs[1].set_title('Frecuencia de MinTemp')
axs[1].set_xlabel('Temperatura (¬∞C)')
axs[1].grid(True)

# Temperatura media
axs[2].hist(df['MeanTemp'].dropna(), bins=40, color='green', alpha=0.7)
axs[2].set_title('Frecuencia de MeanTemp')
axs[2].set_xlabel('Temperatura (¬∞C)')
axs[2].grid(True)

plt.tight_layout()
plt.show()

"""**Graficos y tendencia**"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.linear_model import LinearRegression

# Cargar el dataset
df = pd.read_excel('/content/DatosTempHKObs__Finales.xlsx')

# Asegurarse de que la columna 'Date' est√© en formato datetime
df['Date'] = pd.to_datetime(df[['Year', 'Month', 'Day']])

# Variables a graficar
temp_vars = ['MaxTemp', 'MinTemp', 'MeanTemp']
titles = ['Temperatura M√°xima', 'Temperatura M√≠nima', 'Temperatura Media']
colors = ['red', 'blue', 'green']

# Crear gr√°ficos
for var, title, color in zip(temp_vars, titles, colors):
    plt.figure(figsize=(14, 5))
    sns.scatterplot(x='Date', y=var, data=df, color=color, alpha=0.3, s=10, label='Datos')

    # L√≠nea de tendencia
    x = df['Date'].map(pd.Timestamp.toordinal).values.reshape(-1, 1)  # Convertir fechas a n√∫meros
    y = df[var].values
    modelo = LinearRegression()
    modelo.fit(x, y)
    y_pred = modelo.predict(x)

    plt.plot(df['Date'], y_pred, color='black', linewidth=2, label='Tendencia lineal')

    plt.title(f'{title} diaria con l√≠nea de tendencia')
    plt.xlabel('Fecha')
    plt.ylabel('Temperatura (¬∞C)')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

"""**Distribuci√≥n por mes**"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Cargar el archivo con los datos
df = pd.read_excel('/content/DatosTempHKObs__Finales.xlsx')

# Asegurarse de que 'Month' est√° en formato num√©rico
# Si no existe la columna 'Month', extraerla de la fecha
if 'Month' not in df.columns:
    df['Date'] = pd.to_datetime(df[['Year', 'Month', 'Day']])
    df['Month'] = df['Date'].dt.month

# Crear el boxplot
plt.figure(figsize=(12, 6))
sns.boxplot(x='Month', y='MeanTemp', data=df, palette='coolwarm')

plt.title('Distribuci√≥n mensual de la temperatura media')
plt.xlabel('Mes')
plt.ylabel('Temperatura media (¬∞C)')
plt.xticks(ticks=range(0, 12), labels=[
    'Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun',
    'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'
])
plt.grid(True)
plt.tight_layout()
plt.show()

"""**Gr√°ficos explicativos del resto de variables**"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Cargar datos
df = pd.read_excel('/content/DatosTempHKObs__Finales.xlsx')

# Asegurar formato de fecha y columnas auxiliares
df['Date'] = pd.to_datetime(df[['Year', 'Month', 'Day']])
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month

### 1Ô∏è‚É£ Gr√°fico de Presi√≥n por A√±o (Media anual)
presion_anual = df.groupby('Year')['Presion (hPa)'].mean()

plt.figure(figsize=(12, 5))
sns.lineplot(x=presion_anual.index, y=presion_anual.values, color='purple', linewidth=2)
plt.title('Presi√≥n atmosf√©rica media anual')
plt.xlabel('A√±o')
plt.ylabel('Presi√≥n (hPa)')
plt.grid(True)
plt.tight_layout()
plt.show()

### 2Ô∏è‚É£ Gr√°fico de Precipitaci√≥n mensual (Boxplot)
plt.figure(figsize=(12, 5))
sns.boxplot(x='Month', y='Precipitacion (mm)', data=df, palette='Blues')
plt.title('Distribuci√≥n mensual de la precipitaci√≥n')
plt.xlabel('Mes')
plt.ylabel('Precipitaci√≥n (mm)')
plt.xticks(ticks=range(0, 12), labels=[
    'Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun',
    'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'
])
plt.grid(True)
plt.tight_layout()
plt.show()

### 3Ô∏è‚É£ Gr√°fico de Humedad mensual (Boxplot)
plt.figure(figsize=(12, 5))
sns.boxplot(x='Month', y='Humedad (%)', data=df, palette='Greens')
plt.title('Distribuci√≥n mensual de la humedad relativa')
plt.xlabel('Mes')
plt.ylabel('Humedad (%)')
plt.xticks(ticks=range(0, 12), labels=[
    'Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun',
    'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'
])
plt.grid(True)
plt.tight_layout()
plt.show()

"""**Matriz de correlaci√≥n**"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Cargar el dataset
df = pd.read_excel('/content/DatosTempHKObs__Finales.xlsx')

# Eliminar columnas no deseadas
columnas_excluir = ['Punto de rocio', 'Day', 'Month', 'Year']
df_filtrado = df.drop(columns=columnas_excluir, errors='ignore')

# Calcular la matriz de correlaci√≥n
correlacion = df_filtrado.corr(numeric_only=True)

# Mostrar el heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlacion, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Matriz de correlaci√≥n entre variables clim√°ticas')
plt.tight_layout()
plt.show()